<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE niftoolsxml>
<niftoolsxml version="0.7.1.0">

	<token name="verexpr" attrs="vercond">

		<verexpr token="#DLA#" string="(#VER# #EQ# 257)">DLA</verexpr>
		<verexpr token="#ZTUAC#" string="(#VER# #EQ# 257)">DLA</verexpr>
		<verexpr token="#PC#" string="(#VER# #EQ# 257)">PC</verexpr>
		<verexpr token="#JWE#" string="(#VER# #EQ# 258)">JWE1</verexpr>
		<verexpr token="#PZ#" string="(#VER# #EQ# 260)">PZ all</verexpr>
		<verexpr token="#JWE2#" string="(#VER# #EQ# 262)">JWE2</verexpr> 
		<verexpr token="#JWE2_DEV#" string="(#VER# #EQ# 261)">JWE2</verexpr>
	</token>

	<token name="global" attrs="vercond access">
        Global Tokens.
        NOTE: These must be listed after the above tokens so that they replace last. For example, `verexpr` uses these tokens.
        <global token="#VER#" string="version" />
    </token>

	<xi:include href="../ovl_base/ovl_base.xml" xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="xpointer(*/*)" />

<!--    <version id="old" version="257" >Old</version>-->
    <version id="DLA" version="257" >DLA</version>
    <version id="ZTUAC" version="257" >ZTUAC</version>
    <version id="PC" version="257" >PC</version>
    <version id="JWE1" version="258" >JWE1</version>
    <version id="PZ" version="260" >PZ</version>
    <version id="JWE2_DEV" version="261" >JWE2 Dev Build</version>
    <version id="JWE2" version="262" >JWE2</version>

    <basic name="Channelname" integral="true" countable="true">
		<!--    PC uses ushort-->
		<!--    JWE uses uint-->
    </basic>

	<bitfield name="ManisDtype" storage="uint">
		# PZ dtypes: 0, 1, 4, 5, 6, 32, 34, 36, 37, 38
		# JWE2 dev dtypes: 0, 4, 5, 6, 32, 34, 36, 37, 38
		# JWE2 dtypes: 0, 4, 5, 6, 64, 66, 68, 69, 70
		ManisDtype: 0 0b0 ['compression = 0']
		ManisDtype: 1 0b1 ['compression = 1']
		ManisDtype: 4 0b100 ['compression = 4']
		ManisDtype: 5 0b101 ['compression = 5']
		ManisDtype: 6 0b110 ['compression = 6']
		ManisDtype: 32 0b100000 ['compression = 32']
		ManisDtype: 34 0b100010 ['compression = 34']
		ManisDtype: 36 0b100100 ['compression = 36']
		ManisDtype: 37 0b100101 ['compression = 37']
		ManisDtype: 38 0b100110 ['compression = 38']
		ManisDtype: 64 0b1000000 ['compression = 0', 'has_list = True']
		ManisDtype: 66 0b1000010 ['compression = 2', 'has_list = True']
		ManisDtype: 68 0b1000100 ['compression = 4', 'has_list = True']
		ManisDtype: 69 0b1000101 ['compression = 5', 'has_list = True']
		ManisDtype: 70 0b1000110 ['compression = 6', 'has_list = True']
		<member width="5" pos="0" name="compression" type="int"/>
		<member width="1" pos="5" name="unk" type="bool"/>
		<member width="1" pos="6" name="has_list" type="bool"/>
	</bitfield>

	<bitfield name="SegmentInfo" storage="ushort">
<!--		<member width="5" pos="0" name="scl" type="int"/>-->
<!--		<member width="5" pos="5" name="loc" type="int"/>-->
		<member width="1" pos="9" name="not_last" type="int"/>
		<member width="10" pos="10" name="unk" type="int"/>
	</bitfield>
	<bitfield name="ChannelSize" storage="ushort">
		<member width="5" pos="0" name="scl" type="int"/>
		<member width="5" pos="5" name="loc" type="int"/>
		<member width="5" pos="10" name="rot" type="int"/>
		<member width="1" pos="15" name="unk" type="int"/>
	</bitfield>

	<bitfield name="Key94" storage="uint64">
		for 00 94 channel
		<member width="14" pos="0" name="loc_x" type="int"/>
		<member width="14" pos="14" name="loc_y" type="int"/>
		<member width="14" pos="28" name="loc_z" type="int"/>
		<member width="15" pos="42" name="rot_x" type="int"/>
	</bitfield>
	<bitfield name="Key94b" storage="uint64">
		for 00 94 channel
		<member width="13" pos="0" name="loc_x" type="int"/>
		<member width="13" pos="13" name="loc_y" type="int"/>
		<member width="13" pos="26" name="loc_z" type="int"/>
		<member width="7" pos="39" name="more_loc" type="int"/>
		<member width="2" pos="46" name="rot_rel" type="int"/>
	</bitfield>
	<bitfield name="Key94C" storage="int64">
		for 00 94 channel
		<member width="2" pos="0" name="type" type="int"/>
		<member width="24" pos="2" name="loc_x" type="int"/>
		<member width="14" pos="26" name="loc_y" type="int"/>
		<member width="5" pos="40" name="loc_z" type="int"/>
		<member width="3" pos="45" name="rot_rel" type="int"/>
		<member width="16" pos="48" name="rot_x_val" type="int"/>
		<member width="16" pos="64" name="rot_y_val" type="int"/>
		<member width="16" pos="80" name="rot_z_val" type="int"/>
	</bitfield>

    <compound name="ManisRoot" inherit="MemStruct">
		24 bytes for DLA, ZTUAC, PC, JWE1, old PZ
		32 bytes for PZ1.6+, JWE2
		<add name="mani files size" type="ushort">16 * mani count</add>
        <add name="hash block size" type="ushort">4 * string count</add>
		<add name="zero 0" type="uint"/>
        <add name="zero 1" type="uint64" />
        <add name="zero 2" type="uint64" />
        <add name="zero 3" type="uint64" since="260" />
    </compound>

	<compound name="ManiInfo" >
        288 bytes for JWE / PZ
        304 bytes for PC, ZTUAC (however the last 2 bytes are alignment, and not on the last member of the array)
        <add name="duration" type="float"/>
		<add name="FrameCount" type="uint"/>
		<add name="dtype" type="ManisDtype" >determines the format of keys data</add>
		<add name="zeros 0 " type="uint" arr1="3"/>
		<add name="extra pc 1" type="ushort" until="257"/>
		<add name="PosBoneCount" type="ushort"/>
		<add name="OriBoneCount" type="ushort"/>
		<add name="SclBoneCount" type="ushort"/>
		<add name="unk_count_0" type="ushort"/>JWE2 dev mentions MorphCount and VisCount
		<add name="unk_count_1" type="ushort"/>
		<add name="unk_count_2" type="ushort"/>
		<add name="FloatCount" type="ushort"/>
		in DLA, these store count * frame_count
		<add name="PosBoneCount Repeat" type="ushort" until="257"/>
		<add name="OriBoneCount Repeat" type="ushort" until="257"/>
		<add name="SclBoneCount Repeat" type="ushort" until="257"/>
		<add name="unk 0" type="ushort" until="257"/>
		<add name="unk 1" type="ushort" until="257"/>
		<add name="count a" type="ubyte">FF if unused</add>
		<add name="count b" type="ubyte">FF if unused</add>
		<add name="target bone count" type="uint" >can include joints, such as in PZ water wheel count 5 vs ms2 2 bones, plus joints</add>
		<add name="zeros 2" type="uint" arr1="57" >228 bytes</add>
		<add name="extra zeros pc" type="ushort" arr1="6" until="257" >14 bytes</add>
		<add name="PosBoneMin" type="ubyte"/>
		<add name="PosBoneMax" type="ubyte"/>
		<add name="OriBoneMin" type="ubyte"/>
		<add name="OriBoneMax" type="ubyte"/>
		<add name="SclBoneMin" type="ubyte"/>
		<add name="SclBoneMax" type="ubyte"/>
		<add name="PosBoneCount Related" type="ubyte" since="258"/>
		<add name="PosBoneCount Repeat" type="ubyte" since="258"/>
		<add name="OriBoneCount Related" type="ubyte" since="258"/>
		<add name="OriBoneCount Repeat" type="ubyte" since="258"/>
		<add name="SclBoneCount Related" type="ubyte" since="258" >maybe, not observed yet</add>
		<add name="SclBoneCount Repeat" type="ubyte" since="258"/>
		<add name="zero 0 end" type="ushort" since="258"/>
		<add name="zero 1 end" type="ushort" />for PC, this is alignment and not present at the end of the mani_infos array
    </compound>

    <compound name="Buffer1">
		the game verifies that hash and bone name match
		if they don't, the target won't be animated
		<add name="bone hashes" type="uint" arr1="#ARG#"/>
		<add name="bone names" type="ZString" arr1="#ARG#"/>
		<add name="bone pad" type="PadAlign" template="bone names" arg="4"/>
    </compound>

    <compound name="KeysReader">
    </compound>

    <compound name="InfoHeader">
        Custom header struct
        <add name="version" type="uint"/>
        <add name="mani count" type="uint"/>
        <add name="names" type="ZString" arr1="mani count"/>
        <add name="header" type="ManisRoot"/>
        <add name="mani infos" type="ManiInfo" arr1="mani count"/>
        <add name="name buffer" type="Buffer1" arg="header\hash block size / 4"/>
        <add name="keys buffer" type="KeysReader" arg="mani infos"/>
    </compound>

	<compound name="Vector4H" size="8">
		<field name="x" type="normshort"/>
		<field name="y" type="normshort"/>
		<field name="z" type="normshort"/>
		idiosyncratic - w is last!
		<field name="w" type="normshort"/>
	</compound>

	<compound name="Vector3H" size="8">
		<field name="x" type="normshort"/>
		<field name="y" type="normshort"/>
		<field name="z" type="normshort"/>
	</compound>

	<compound name="Vector2" size="8">
		<field name="x" type="float"/>
		<field name="y" type="float"/>
	</compound>

    <compound name="FloatsGrabber" >
    </compound>

    <compound name="Repeat" >
		<add name="zeros 0" type="uint64" arr1="7" > </add>
		<add name="byte size" type="uint64" >to be read sequentially starting after this array </add>
		<add name="zeros 1" type="uint64" arr1="2" > </add>
    </compound>

	<compound name="UncompressedManiData" args="2">
		<add name="PosBones" type="Vector3" arr1="#ARG2#\FrameCount" arr2="#ARG2#\PosBoneCount" />
		<add name="OriBones" type="Vector4H" arr1="#ARG2#\FrameCount" arr2="#ARG2#\OriBoneCount"  />
		found in DLA SpaceMountain animations.manisetd740d135
		<add name="ShrBones" type="Vector2" arr1="#ARG2#\FrameCount" arr2="#ARG2#\SclBoneCount" />
		<add name="SclBones" type="Vector3" arr1="#ARG2#\FrameCount" arr2="#ARG2#\SclBoneCount" />
		<add name="Floats" type="float" arr1="#ARG2#\FrameCount" arr2="#ARG2#\FloatCount" />
    </compound>

	<compound name="CompressedManiData" args="2">
		<add name="Floats" type="float" arr1="#ARG2#\FrameCount" arr2="#ARG2#\FloatCount" >uncompressed, possibly because ACL didn't support scalars</add>

<!--		two uint zeros, or padding-->
		<add name="pad 2" type="SmartPadding" >?</add>
<!--	<add name="zero" type="uint64" cond="(#ARG#\FloatCount) #GT# (0)"> </add>-->

		<add name="FrameCount" type="uint"/>
		<add name="OriBoneCount" type="uint"/>
		<add name="PosBoneCount" type="uint"/>
		<add name="SclBoneCount" type="uint" >maybe</add>
		<add name="zeros 18" type="uint" arr1="8">fixed</add>
		used eg in PZ animal boxes, which have scale keys
		<add name="scale min" type="Vector3"/>
		<add name="scale max" type="Vector3"/>
		<add name="zeros 4" type="uint" arr1="4">fixed</add>
		<add name="count" type="ushort" >?</add>
		<add name="QuantisationLevel" type="ushort" >usually 420, or 0</add>
		<add name="ref2" type="Empty" > </add>
		<add name="some indices" type="ubyte" arr1="PosBoneCount" > </add>
		<add name="flag 0" type="ubyte" > </add>
		<add name="flag 1" type="ubyte" > </add>
		<add name="flag 2" type="ubyte" > </add>
		<add name="flag 3" type="ubyte" > </add>
<!--		<add name="some indices" type="ubyte" arr1="PosBoneCount" > </add>-->
		<add name="anoth pad" type="PadAlign" template="ref2" arg="4" > </add>
<!--		<add name="anoth pad" type="SmartPadding" >?</add>-->
<!--        <add name="pad to 8" type="ubyte" arr1="(8 - (count  % 8)) % 8" > </add>-->

		<add name="loc min" type="Vector3"/>
		<add name="loc max" type="Vector3"/>might be extent, but not sure about how it is encoded
		<add name="floatsb" type="FloatsGrabber" >not sure</add>
	<!-- <add name="floatsb" type="float" arr1="12" vercond="#JWE2#">these are likely a scale reference or factor</add> -->
	<!-- <add name="floatsb" type="float" arr1="6" vercond="#PZ#">these are likely a scale reference or factor</add> -->
		<!-- <add name="floats second" type="float" arr1="flag 1" arr2="6"  >these are likely a scale reference or factor</add> -->
		<!-- <add name="floats third" type="float" arr1="6" vercond="#PZ#" cond="flag 2 #GT# 1" >these are likely a scale reference or factor</add> -->

<!--		<add name="floats 2" type="float" arr1="3" arr2="6"  >these are likely a scale reference or factor</add>-->

<!--		<add name="unk" type="uint64" cond="#ARG#\count_a #EQ# 255">present in feeder, not in dino</add> -->

<!--		<add name="unk for FloatCount" type="uint64" cond="#ARG# \ FloatCount">this seems to be vaguely related, but not always there?</add>-->
<!--		<add name="floats extra" type="float" arr1="#ARG#\FloatCount" >nope likely wrong</add>-->
		<add name="anoth pad2" type="PadAlign" template="#ARG1# \ ref" arg="16"/>

		<add name="ref3" type="Empty"/>
		<add name="repeats" type="Repeat" arr1="count" > </add>
	</compound>

	<compound name="ManiBlock" >
		<add name="ref" type="Empty"/>
		define the channel names
		<add name="PosBones" type="Channelname" arr1="#ARG#\PosBoneCount"/>
		<add name="OriBones" type="Channelname" arr1="#ARG#\OriBoneCount"/>
		<add name="SclBones" type="Channelname" arr1="#ARG#\SclBoneCount"/>
		<add name="Floats" type="Channelname" arr1="#ARG#\FloatCount"/>
		map channel to corresponding bone index
		<add name="PosBones P" type="ubyte" arr1="#ARG#\PosBoneCount"/>
		<add name="OriBones P" type="ubyte" arr1="#ARG#\OriBoneCount"/>
		<add name="SclBones P" type="ubyte" arr1="#ARG#\SclBoneCount"/>
		map bone to corresponding channel, -1 for bones in range that are not keyed
		<add name="PosBones delta" type="ubyte" arr1="(#ARG#\PosBoneMax - #ARG#\PosBoneMin) + 1" cond="#ARG#\PosBoneMin #LT# 255"> </add>
		<add name="OriBones delta" type="ubyte" arr1="(#ARG#\OriBoneMax - #ARG#\OriBoneMin) + 1" cond="#ARG#\OriBoneMin #LT# 255"> </add>
		<add name="SclBones delta" type="ubyte" arr1="(#ARG#\SclBoneMax - #ARG#\SclBoneMin) + 1" cond="#ARG#\SclBoneMin #LT# 255"> </add>
		<add name="pad" type="PadAlign" template="ref" arg="4"/>
		start of keyframe data
		<add name="KeyData" type="UncompressedManiData" arg1="#SELF#" arg2="#ARG#" cond="#ARG#\dtype\compression #EQ# 0"/>
		<add name="KeyData" type="CompressedManiData" arg1="#SELF#" arg2="#ARG#" cond="#ARG#\dtype\compression #GT# 0"/>
    </compound>

    <compound name="ChunkSizes" >
		<add name="zeros 0" type="uint64" > </add>
		<add name="bone" type="uint" ></add>
		<add name="counta" type="uint" > </add>
    </compound>

    <compound name="SubChunkReader" >
    </compound>
	
    <compound name="UnkChunkList" >
		<add name="ref" type="Empty"/>
		<add name="zero 0" type="SmartPadding"/>
		<add name="subchunk_count" type="ushort"/>
		<add name="flag" type="ushort" > </add>
		<add name="zero 1" type="uint" > </add>
		<add name="chunksize_list" type="ChunkSizes" arr1="subchunk_count" > </add>
		<add name="subchunk list" type="SubChunkReader" arg="chunksize_list" > </add>
        <add name="pad" type="PadAlign" template="ref" arg="16" >?</add>
    </compound>
	
    <compound name="WeirdElementOne" >
		<add name="float 0" type="float"> </add>
		<add name="vec 0" type="Vector3"/>
		<add name="zeros 0" type="uint64" arr1="2"> </add>
		<add name="vec 1" type="Vector3"/>
		<add name="countb" type="uint"> </add>
    </compound>
	
    <compound name="WeirdElementTwoReader" >
    </compound>
	
    <compound name="SubChunk" >
		arg is chunksizes
		<add name="weird list one" type="WeirdElementOne" arr1="#ARG#\counta" >for subchunk_list[n] needs chunksize_list[n]'s counta for array length</add>
		<add name="weird list two" type="WeirdElementTwoReader" arg="weird list one" >  needs sum of countb's from weird list one</add>
    </compound>
	
    <compound name="WeirdElementTwo" >
		<add name="many floats" type="float" arr1="7"> </add>
    </compound>

</niftoolsxml>
